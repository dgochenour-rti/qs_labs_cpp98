/* quickstart_subscriber.cxx

A subscription example

This file is derived from code automatically generated by the rtiddsgen  
command:

rtiddsgen -language C++ -example <arch> quickstart.idl

Example subscription of type qs::qs_type automatically generated by 
'rtiddsgen'. To test them follow these steps:

(1) Compile this file and the example publication.

(2) Start the subscription with the command
objs/<arch>/quickstart_subscriber <domain_id> <sample_count>

(3) Start the publication with the command
objs/<arch>/quickstart_publisher <domain_id> <sample_count>

(4) [Optional] Specify the list of discovery initial peers and 
multicast receive addresses via an environment variable or a file 
(in the current working directory) called NDDS_DISCOVERY_PEERS. 

You can run any number of publishers and subscribers programs, and can 
add and remove them dynamically from the domain.

Example:

To run the example application on domain <domain_id>:

On Unix: 

objs/<arch>/quickstart_publisher <domain_id> 
objs/<arch>/quickstart_subscriber <domain_id> 

On Windows:

objs\<arch>\quickstart_publisher <domain_id>  
objs\<arch>\quickstart_subscriber <domain_id>   

*/

#include <iostream>
#include <stdio.h>
#include <stdlib.h>

#include "quickstart.h"
#include "quickstartSupport.h"
#include "ndds/ndds_cpp.h"

#include "ndds/ndds_namespace_cpp.h"

using namespace DDS;

namespace qs {

    class qs_typeListener : public DataReaderListener {
      public:
        virtual void on_requested_deadline_missed(
            DataReader* /*reader*/,
            const RequestedDeadlineMissedStatus& /*status*/) {}

        virtual void on_requested_incompatible_qos(
            DataReader* reader,
            const RequestedIncompatibleQosStatus& status);

        virtual void on_sample_rejected(
            DataReader* /*reader*/,
            const SampleRejectedStatus& /*status*/) {}

        virtual void on_liveliness_changed(
            DataReader* /*reader*/,
            const LivelinessChangedStatus& /*status*/) {}

        virtual void on_sample_lost(
            DataReader* /*reader*/,
            const SampleLostStatus& /*status*/) {}

        virtual void on_subscription_matched(
            DataReader* /*reader*/,
            const SubscriptionMatchedStatus& /*status*/) {}

        virtual void on_data_available(DataReader* reader);
    };

    void qs_typeListener::on_data_available(DataReader* reader)
    {
        qs::qs_typeDataReader *qs_type_reader = NULL;
        qs::qs_typeSeq data_seq;
        SampleInfoSeq info_seq;
        ReturnCode_t retcode;
        int i;

        qs_type_reader = qs::qs_typeDataReader::narrow(reader);
        if (qs_type_reader == NULL) {
            printf("DataReader narrow error\n");
            return;
        }

        retcode = qs_type_reader->take(
            data_seq, info_seq, LENGTH_UNLIMITED,
            ANY_SAMPLE_STATE, ANY_VIEW_STATE, ANY_INSTANCE_STATE);

        if (retcode == RETCODE_NO_DATA) {
            return;
        } else if (retcode != RETCODE_OK) {
            printf("take error %d\n", retcode);
            return;
        }

        for (i = 0; i < data_seq.length(); ++i) {
            if (info_seq[i].valid_data) {
                printf("Received data\n");
                qs::qs_typeTypeSupport::print_data(&data_seq[i]);
            }
        }

        retcode = qs_type_reader->return_loan(data_seq, info_seq);
        if (retcode != RETCODE_OK) {
            printf("return loan error %d\n", retcode);
        }
    }

    void qs_typeListener::on_requested_incompatible_qos(DataReader* reader,
                                                        const RequestedIncompatibleQosStatus& status) {
        std::cout << "on_requested_incompatible_qos triggered!" << std::endl;
        std::cout << "status.last_policy_id = " << status.last_policy_id << std::endl;
    }
}

/* Delete all entities */
static int subscriber_shutdown(
    DomainParticipant *participant)
{
    ReturnCode_t retcode;
    int status = 0;

    if (participant != NULL) {
        retcode = participant->delete_contained_entities();
        if (retcode != RETCODE_OK) {
            printf("delete_contained_entities error %d\n", retcode);
            status = -1;
        }

        retcode = TheParticipantFactory->delete_participant(participant);
        if (retcode != RETCODE_OK) {
            printf("delete_participant error %d\n", retcode);
            status = -1;
        }
    }

    /* RTI Connext provides the finalize_instance() method on
    domain participant factory for people who want to release memory used
    by the participant factory. Uncomment the following block of code for
    clean destruction of the singleton. */
    /*

    retcode = DomainParticipantFactory::finalize_instance();
    if (retcode != RETCODE_OK) {
        printf("finalize_instance error %d\n", retcode);
        status = -1;
    }
    */
    return status;
}

extern "C" int subscriber_main(int domainId, int sample_count)
{
    DomainParticipant *participant = NULL;
    Subscriber *subscriber = NULL;
    Topic *topic = NULL;
    qs::qs_typeListener *reader_listener = NULL; 
    DataReader *reader = NULL;
    ReturnCode_t retcode;
    const char *type_name = NULL;
    int count = 0;
    Duration_t receive_period = {4,0};
    int status = 0;
    //struct DDS_Duration_t wait_timeout = {1,500000000};


    // LAB #6 - configure the DP factory to use a custom XML file

    DDS_DomainParticipantFactoryQos factory_qos;
    DDSTheParticipantFactory->get_qos(factory_qos);

    // LAB #6
    // because we are only going to work with a single XML file, we'll make the
    // url_profile sequence have a length of 1, then add the custom file to the 
    // sequence
    factory_qos.profile.url_profile.ensure_length(1, 1);
    factory_qos.profile.url_profile[0] = DDS_String_dup("MY_QOS_PROFILES.xml");
    DDSTheParticipantFactory->set_qos(factory_qos);    

    // LAB #6 -- for all of the entity creation below, move to the 
    // *_with_profile() calls

    /* To customize participant QoS, use 
    the configuration file USER_QOS_PROFILES.xml */
    participant = TheParticipantFactory->create_participant_with_profile(
            domainId, 
            "MyLibrary",
            "MyProfile", 
            NULL /* listener */, 
            STATUS_MASK_NONE);
    if (participant == NULL) {
        printf("create_participant error\n");
        subscriber_shutdown(participant);
        return -1;
    }

    /* To customize the subscriber QoS, use 
    the configuration file USER_QOS_PROFILES.xml */
    subscriber = participant->create_subscriber_with_profile(
            "MyLibrary",
            "MyProfile", 
            NULL /* listener */, 
            STATUS_MASK_NONE);
    if (subscriber == NULL) {
        printf("create_subscriber error\n");
        subscriber_shutdown(participant);
        return -1;
    }

    /* Register the type before creating the topic */
    type_name = qs::qs_typeTypeSupport::get_type_name();
    retcode = qs::qs_typeTypeSupport::register_type(
        participant, type_name);
    if (retcode != RETCODE_OK) {
        printf("register_type error %d\n", retcode);
        subscriber_shutdown(participant);
        return -1;
    }

    /* To customize the topic QoS, use 
    the configuration file USER_QOS_PROFILES.xml */

    //LAB #4 -- use a constant defined in the IDL for the Topic name
    topic = participant->create_topic(
        qs::topicName,
        type_name, TOPIC_QOS_DEFAULT, NULL /* listener */,
        STATUS_MASK_NONE);
    if (topic == NULL) {
        printf("create_topic error\n");
        subscriber_shutdown(participant);
        return -1;
    }

    /* Create a data reader listener */
    reader_listener = new qs::qs_typeListener();

    /* To customize the data reader QoS, use 
    the configuration file USER_QOS_PROFILES.xml */

    // LAB #7 -- change the status mask to *not* include on_data_available
    reader = subscriber->create_datareader_with_profile(
            topic, 
            "MyLibrary",
            "MyProfile",
            reader_listener,
            REQUESTED_DEADLINE_MISSED_STATUS | REQUESTED_INCOMPATIBLE_QOS_STATUS);
    if (reader == NULL) {
        printf("create_datareader error\n");
        subscriber_shutdown(participant);
        delete reader_listener;
        return -1;
    }

    // LAB #7 - get status condition from DW
    DDSStatusCondition * status_condition = reader->get_statuscondition();
    if (status_condition == NULL) {
        printf("Error getting status condition.\n");
        return -1;
    }

    // LAB #7 - set statuses in which we are interested
    retcode = status_condition->set_enabled_statuses(DDS_DATA_AVAILABLE_STATUS);
    if (retcode != DDS_RETCODE_OK) {
        printf("Error setting enabled status\n");
        return -1;
    }

    // LAB #7 - instantiate new waitset, wait_timeout (the amount of time the 
    // wait set will block) and attach the conditions from above
    
    DDSWaitSet * waitset = new DDSWaitSet();
    struct DDS_Duration_t wait_timeout = {1,500000000};
    
    retcode = waitset->attach_condition(status_condition);
    if (retcode != DDS_RETCODE_OK) {
        printf("Error attaching condition to waitset.\n");
        return -1;
    }

    // LAB #7 - narrow the DW (previously done in the listener code)
    qs::qs_typeDataReader *qs_type_reader = 
            qs::qs_typeDataReader::narrow(reader);
    if (qs_type_reader == NULL) {
        printf("DataReader narrow error\n");
        return -1;
    } 

    // LAB #7 - main loop is refactored to read using the wait set instead of 
    // depending on the on_data_available() listener

    /* Main loop */
    for (count=0; (sample_count == 0) || (count < sample_count); ++count) {
        DDSConditionSeq active_conditions_seq;

        retcode = waitset->wait(active_conditions_seq, wait_timeout);
        /* We get to timeout if no conditions were triggered */
        if (retcode == DDS_RETCODE_TIMEOUT) {
            std::cout << "Wait timed out!! No conditions were triggered." 
                    << std::endl;
            continue;
        } else if (retcode != DDS_RETCODE_OK) {
            std::cout << "wait returned error: " << retcode << std::endl;
            break;
        }

        // Get the number of active conditions */
        int active_conditions = active_conditions_seq.length();
        std::cout << "Got " << active_conditions << " active conditions" 
                << std::endl;

        // In this case, we have only a single condition, but if we had 
        // multiple, we would need to iterate over them and check which one is 
        // true.  Leaving the logic for the more complex case.

        for (int i = 0; i < active_conditions; ++i) {
            
            // Compare with Status Conditions
            if (active_conditions_seq[i] == status_condition) {
                // Get the status changes so we can check which status
                // condition triggered.
                DDS_StatusMask triggeredmask =
                        qs_type_reader->get_status_changes();
  
                if (triggeredmask & DDS_DATA_AVAILABLE_STATUS) {
                    // Current conditions match our conditions to read data, so
                    // we can read data just like we would do in any other
                    // example.
                    qs::qs_typeSeq data_seq;
                    DDS_SampleInfoSeq info_seq;

                    // Access data using read(), take(), etc.  If you fail to do 
                    // this the condition will remain true, and the WaitSet will
                    // wake up immediately - causing high CPU usage when it does 
                    // not sleep in the loop 
                    retcode = DDS_RETCODE_OK;
                    while (retcode != DDS_RETCODE_NO_DATA) {
                        retcode = qs_type_reader->take(data_seq, 
                                                       info_seq, 
                                                       DDS_LENGTH_UNLIMITED,
                                                       DDS_ANY_SAMPLE_STATE, 
                                                       DDS_ANY_VIEW_STATE,
                                                       DDS_ANY_INSTANCE_STATE);
                    
                        for (int j = 0; j < data_seq.length(); ++j) {
                            if (!info_seq[j].valid_data) {
                                std::cout << "Got metadata" << std::endl;
                                continue;
                            }
                            qs::qs_typeTypeSupport::print_data(&data_seq[j]);
                        }
                        // Return the loaned data 
                        qs_type_reader->return_loan(data_seq, info_seq);
                    }
                }
            }
        }
    }

    /* Delete all entities */
    status = subscriber_shutdown(participant);
    delete reader_listener;

    return status;
}

int main(int argc, char *argv[])
{
    int domainId = 0;
    int sample_count = 0; /* infinite loop */

    if (argc >= 2) {
        domainId = atoi(argv[1]);
    }
    if (argc >= 3) {
        sample_count = atoi(argv[2]);
    }

    /* Uncomment this to turn on additional logging
    NDDSConfigLogger::get_instance()->
    set_verbosity_by_category(NDDS_CONFIG_LOG_CATEGORY_API, 
    NDDS_CONFIG_LOG_VERBOSITY_STATUS_ALL);
    */

    return subscriber_main(domainId, sample_count);
}

